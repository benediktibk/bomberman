#ifndef GAMEENGINE_GRIDTEST_H
#define GAMEENGINE_GRIDTEST_H

#include <cppunit/TestFixture.h>
#include <cppunit/extensions/HelperMacros.h>

namespace Common
{
	class UniqueIdCreator;
}

namespace GameEngine
{
	class GridTest :
			public CPPUNIT_NS::TestFixture
	{
		CPPUNIT_TEST_SUITE(GridTest);
		CPPUNIT_TEST(isPlaceEmpty_TestOnEmptyVector_true);
		CPPUNIT_TEST(isPlaceEmpty_TestNotEmptyVector_false);
		CPPUNIT_TEST(addBombAtPlace_add_at3_3);
		CPPUNIT_TEST(getLooseWallsInRange_bombat32_twowallsup);
		CPPUNIT_TEST(getLooseWallsInRange_bombat32_twowallsright);
		CPPUNIT_TEST(getLooseWallsInRange_bombat32_twowallsleft);
		CPPUNIT_TEST(getLooseWallsInRange_bombat32_twowallsdown);
		CPPUNIT_TEST(getLooseWallsInRange_bombat32and4wallssurrounding_sizeofwallsinrangeis4);
		CPPUNIT_TEST(getLooseWallsInRange_bombat32and8wallssurroundingrangeis2_sizeofwallsinrangeis4);
		CPPUNIT_TEST(getLooseWallsInRange_bombat61rangeis2_sizeofwallsinrangeis3);
		CPPUNIT_TEST(getLooseWallsInRange_bombat32andwallssurroundingdistance2rangeis2_sizeofwallsinrangeis4);
		CPPUNIT_TEST(getLooseWallsInRange_bombat32andwallssurroundingdistance2rangeis1_sizeofwallsinrangeis0);
		CPPUNIT_TEST(getLooseWallsInRange_bombat60rangeis1_sizeofwallsinrangeis2);
		CPPUNIT_TEST(getPowerUpsInRange_bombat33rangeis4BombEmptyWallPowerUp_sizeofwallsinrangeis3);
		CPPUNIT_TEST(getPowerUpsInRange_bombat33RangeIs10PowerUpBombPowerUpPowerUpWallPowerUp_sizeOfPowerUpsInRangeIs3);
		CPPUNIT_TEST(getPowerUpsInRange_bombat59gridsize1010_expectassertionerroringetIndex);
		CPPUNIT_TEST(isPlaceEmpty_itemat33_false);
		CPPUNIT_TEST(isPlaceEmpty_itemat33_true);
		CPPUNIT_TEST(removeBomb_itemat33_true);
		CPPUNIT_TEST(removeWall_itemat33_true);
		CPPUNIT_TEST(removePowerUp_itemat33_true);
		CPPUNIT_TEST(getPlayerFields_PlayerAt1comm5and1_11and21);
		CPPUNIT_TEST(getPlayerFields_PlayerAt1and1comma5_11and12);
		CPPUNIT_TEST(addWallAtPlace_add_at3_3);
		CPPUNIT_TEST(removeBomb_from_3_3);
		CPPUNIT_TEST(removeWall_from_3_3);
		CPPUNIT_TEST(removeWall_addedWall_placeIsEmpty);
		CPPUNIT_TEST(isPlaceEmtpy_coveredByNothing_true);
		CPPUNIT_TEST(isPlaceEmpty_coveredByWall_false);
		CPPUNIT_TEST(getPlayersInRange_playerRightBesideABomb_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerWithDifferentXAndYPosition_resultSizeIs0);
		CPPUNIT_TEST(getPlayersInRange_playerAtLeftEndOfDestructionRange_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerAtRightEndOfDestructionRange_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerAtUpperEndOfDestructionRange_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerAtLowerEndOfDestructionRange_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerAfterLeftEndOfDestructionRange_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerAfterRightEndOfDestructionRange_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerAfterUpperEndOfDestructionRange_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerAfterLowerEndOfDestructionRange_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerAboveInFrontOfWall_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerBelowInFrontOfWall_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerLeftInFrontOfWall_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerRightInFrontOfWall_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerAboveBehindOfLooseWall_resultSizeIs0);
		CPPUNIT_TEST(getPlayersInRange_playerBelowBehindOfLooseWall_resultSizeIs0);
		CPPUNIT_TEST(getPlayersInRange_playerLeftBehindOfLooseWall_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerRightBehindOfLooseWall_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerRightOnTheBomb_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_twoOfTwoPlayersInRange_resultSizeIs2);
		CPPUNIT_TEST(getPlayersInRange_oneOfTwoPlayersInRange_resultSizeIs1);
		CPPUNIT_TEST(getPlayersInRange_playerOnlyHalfInRange_resultSizeIs1);
		CPPUNIT_TEST(getDistanceToNextWallLeft_nothingSet_distanceIsWayToEndOfLevel);
		CPPUNIT_TEST(getDistanceToNextWallRight_nothingSet_distanceIsWayToEndOfLevel);
		CPPUNIT_TEST(getDistanceToNextWallUp_nothingSet_distanceIsWayToEndOfLevel);
		CPPUNIT_TEST(getDistanceToNextWallDown_nothingSet_distanceIsWayToEndOfLevel);
		CPPUNIT_TEST(getDistanceToNextWallLeft_wallInRange_distanceIsWayToWall);
		CPPUNIT_TEST(getDistanceToNextWallRight_wallInRange_distanceIsWayToWall);
		CPPUNIT_TEST(getDistanceToNextWallUp_wallInRange_distanceIsWayToWall);
		CPPUNIT_TEST(getDistanceToNextWallDown_wallInRange_distanceIsWayToWall);
		CPPUNIT_TEST(getDistanceToNextWallLeft_powerUpInRange_distanceIsWayToEndOfLevel);
		CPPUNIT_TEST(getDistanceToNextWallRight_powerUpInRange_distanceIsWayToEndOfLevel);
		CPPUNIT_TEST(getDistanceToNextWallUp_powerUpInRange_distanceIsWayToEndOfLevel);
		CPPUNIT_TEST(getDistanceToNextWallDown_powerUpInRange_distanceIsWayToEndOfLevel);
		CPPUNIT_TEST(getDistanceToNextWallLeft_bombInRange_distanceIsWayToEndOfLevel);
		CPPUNIT_TEST(getDistanceToNextWallRight_bombInRange_distanceIsWayToEndOfLevel);
		CPPUNIT_TEST(getDistanceToNextWallUp_bombInRange_distanceIsWayToEndOfLevel);
		CPPUNIT_TEST(getDistanceToNextWallDown_bombInRange_distanceIsWayToEndOfLevel);
		CPPUNIT_TEST(constructor_validValues_observerCountIs0);
		CPPUNIT_TEST(addBombAtPlace_oneObserverMock_observerGotOneCallToFieldHasChanged);
		CPPUNIT_TEST(addBombAtPlace_bombPosition3And4AndOneObserverMock_observerGotCallToFieldHasChangedWithParam3And4);
		CPPUNIT_TEST(addWallAtPlace_oneObserverMock_observerGotOneCallToFieldHasChanged);
		CPPUNIT_TEST(addWallAtPlace_wallPosition3And4AndOneObserverMock_observerGotCallToFieldHasChangedWithParam3And4);
		CPPUNIT_TEST(removeBomb_bombPosition3And4AndOneObserverMock_observerGotOneCallToFieldHasChanged);
		CPPUNIT_TEST(removeBomb_bombPosition3And4AndOneObserverMock_observerGotCallToFieldHasChangedWithParam3And4);
		CPPUNIT_TEST(removeWall_oneObserverMock_observerGotOneCallToFieldHasChanged);
		CPPUNIT_TEST(removeWall_wallPosition1And0AndOneObserverMock_observerGotCallToFieldHasChangedWithParam1And0);
		CPPUNIT_TEST(removeWall_wallAddedPreviouslyAndOneObserverMock_observerGotTwoCallsToFieldHasChanged);
		CPPUNIT_TEST_SUITE_END();

	public:
		virtual void setUp();
		virtual void tearDown();

	private:
		void isPlaceEmpty_TestOnEmptyVector_true();
		void isPlaceEmpty_TestNotEmptyVector_false();
		void removeWall_from_3_3();
		void removeBomb_from_3_3();
		void addWallAtPlace_add_at3_3();
		void addBombAtPlace_add_at3_3();
		void getLooseWallsInRange_bombat32_twowallsup();
		void getLooseWallsInRange_bombat32_twowallsright();
		void getLooseWallsInRange_bombat32_twowallsleft();
		void getLooseWallsInRange_bombat32_twowallsdown();
		void getLooseWallsInRange_bombat32and4wallssurrounding_sizeofwallsinrangeis4();
		void getLooseWallsInRange_bombat32and8wallssurroundingrangeis2_sizeofwallsinrangeis4();
		void getLooseWallsInRange_bombat61rangeis2_sizeofwallsinrangeis3();
		void getLooseWallsInRange_bombat32andwallssurroundingdistance2rangeis2_sizeofwallsinrangeis4();
		void getLooseWallsInRange_bombat32andwallssurroundingdistance2rangeis1_sizeofwallsinrangeis0();
		void getLooseWallsInRange_bombat60rangeis1_sizeofwallsinrangeis2();
		void getPowerUpsInRange_bombat33rangeis4BombEmptyWallPowerUp_sizeofwallsinrangeis3();
		void getPowerUpsInRange_bombat33RangeIs10PowerUpBombPowerUpPowerUpWallPowerUp_sizeOfPowerUpsInRangeIs3();
		void getPowerUpsInRange_bombat59gridsize1010_expectassertionerroringetIndex();
		void isPlaceEmpty_itemat33_false();
		void isPlaceEmpty_itemat33_true();
		void removeBomb_itemat33_true();
		void removeWall_itemat33_true();
		void removePowerUp_itemat33_true();
		void getPlayerFields_PlayerAt1comm5and1_11and21();
		void getPlayerFields_PlayerAt1and1comma5_11and12();
		void removeWall_addedWall_placeIsEmpty();
		void isPlaceEmtpy_coveredByNothing_true();
		void isPlaceEmpty_coveredByWall_false();
		void getPlayersInRange_playerRightBesideABomb_resultSizeIs1();
		void getPlayersInRange_playerWithDifferentXAndYPosition_resultSizeIs0();
		void getPlayersInRange_playerAtLeftEndOfDestructionRange_resultSizeIs1();
		void getPlayersInRange_playerAtRightEndOfDestructionRange_resultSizeIs1();
		void getPlayersInRange_playerAtUpperEndOfDestructionRange_resultSizeIs1();
		void getPlayersInRange_playerAtLowerEndOfDestructionRange_resultSizeIs1();
		void getPlayersInRange_playerAfterLeftEndOfDestructionRange_resultSizeIs1();
		void getPlayersInRange_playerAfterRightEndOfDestructionRange_resultSizeIs1();
		void getPlayersInRange_playerAfterUpperEndOfDestructionRange_resultSizeIs1();
		void getPlayersInRange_playerAfterLowerEndOfDestructionRange_resultSizeIs1();
		void getPlayersInRange_playerAboveInFrontOfWall_resultSizeIs1();
		void getPlayersInRange_playerBelowInFrontOfWall_resultSizeIs1();
		void getPlayersInRange_playerLeftInFrontOfWall_resultSizeIs1();
		void getPlayersInRange_playerRightInFrontOfWall_resultSizeIs1();
		void getPlayersInRange_playerAboveBehindOfLooseWall_resultSizeIs0();
		void getPlayersInRange_playerBelowBehindOfLooseWall_resultSizeIs0();
		void getPlayersInRange_playerLeftBehindOfLooseWall_resultSizeIs1();
		void getPlayersInRange_playerRightBehindOfLooseWall_resultSizeIs1();
		void getPlayersInRange_playerRightOnTheBomb_resultSizeIs1();
		void getPlayersInRange_twoOfTwoPlayersInRange_resultSizeIs2();
		void getPlayersInRange_oneOfTwoPlayersInRange_resultSizeIs1();
		void getPlayersInRange_playerOnlyHalfInRange_resultSizeIs1();
		void getDistanceToNextWallLeft_nothingSet_distanceIsWayToEndOfLevel();
		void getDistanceToNextWallRight_nothingSet_distanceIsWayToEndOfLevel();
		void getDistanceToNextWallUp_nothingSet_distanceIsWayToEndOfLevel();
		void getDistanceToNextWallDown_nothingSet_distanceIsWayToEndOfLevel();
		void getDistanceToNextWallLeft_wallInRange_distanceIsWayToWall();
		void getDistanceToNextWallRight_wallInRange_distanceIsWayToWall();
		void getDistanceToNextWallUp_wallInRange_distanceIsWayToWall();
		void getDistanceToNextWallDown_wallInRange_distanceIsWayToWall();
		void getDistanceToNextWallLeft_powerUpInRange_distanceIsWayToEndOfLevel();
		void getDistanceToNextWallRight_powerUpInRange_distanceIsWayToEndOfLevel();
		void getDistanceToNextWallUp_powerUpInRange_distanceIsWayToEndOfLevel();
		void getDistanceToNextWallDown_powerUpInRange_distanceIsWayToEndOfLevel();
		void getDistanceToNextWallLeft_bombInRange_distanceIsWayToEndOfLevel();
		void getDistanceToNextWallRight_bombInRange_distanceIsWayToEndOfLevel();
		void getDistanceToNextWallUp_bombInRange_distanceIsWayToEndOfLevel();
		void getDistanceToNextWallDown_bombInRange_distanceIsWayToEndOfLevel();
		void constructor_validValues_observerCountIs0();
		void addBombAtPlace_oneObserverMock_observerGotOneCallToFieldHasChanged();
		void addBombAtPlace_bombPosition3And4AndOneObserverMock_observerGotCallToFieldHasChangedWithParam3And4();
		void addWallAtPlace_oneObserverMock_observerGotOneCallToFieldHasChanged();
		void addWallAtPlace_wallPosition3And4AndOneObserverMock_observerGotCallToFieldHasChangedWithParam3And4();
		void removeBomb_bombPosition3And4AndOneObserverMock_observerGotOneCallToFieldHasChanged();
		void removeBomb_bombPosition3And4AndOneObserverMock_observerGotCallToFieldHasChangedWithParam3And4();
		void removeWall_oneObserverMock_observerGotOneCallToFieldHasChanged();
		void removeWall_wallPosition1And0AndOneObserverMock_observerGotCallToFieldHasChangedWithParam1And0();
		void removeWall_wallAddedPreviouslyAndOneObserverMock_observerGotTwoCallsToFieldHasChanged();

	private:
		Common::UniqueIdCreator *m_powerUpIdCreator;
		Common::UniqueIdCreator *m_wallIdCreator;
		Common::UniqueIdCreator *m_bombIdCreator;
		Common::UniqueIdCreator *m_playerIdCreator;
	};
}

#endif



